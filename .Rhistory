knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
model = naiveBayes(x=subset(train,select=-Class),y=train$Class)
library(mlbench)
data(Glass)
library(mlbench)
data(Glass)
```{r names3}
names(Glass)
names(Glass)
head(Glass)
summary(Glass)
model = svm(Species ~ .,data=iris,cross=10, cost=0.8, gamma=0.25)
model = svm(Type ~ .,data=Glass, kernel = "radial", cross=10, cost=0.8, gamma=0.25)
library("e1071")
model = svm(Type ~ .,data=Glass, kernel = "radial", cross=10, cost=0.8, gamma=0.25)
model$accuracies
model$tot.accuracy
model = svm(Type ~ .,data=Glass, kernel = "radial", cross=10, cost=0.8, gamma=0.25)
model$accuracies # precision en cada uno de los pliegues
model$tot.accuracy
(svm_grid = expand.grid(C=2^seq(from=-5,to=5,by=2),
gamma=2^seq(from=-7,to=3,by=2)))
head(svm_grid = expand.grid(C=2^seq(from=-5,to=5,by=2),
gamma=2^seq(from=-7,to=3,by=2)))
(svm_grid = expand.grid(C=2^seq(from=-5,to=5,by=2),
gamma=2^seq(from=-7,to=3,by=2)))
library(lattice)
library(ggplot2)
library(ggplot2)
library(MASS)
library(caret)
(svm_grid = expand.grid(C=2^seq(from=-5,to=5,by=2),
gamma=2^seq(from=-7,to=3,by=2)))
svm_valid = trainControl(method='cv',number=10)
svm_valid = trainControl(method='cv',number=10)
svm = train(Type ~ .,data=Glass, method='svmRadial',trControl=svm_valid,
tuneGrid=svm_grid,preProcess=c("center","scale"))
(svm_grid = expand.grid(C = 2^seq(from=-5,to=5,by=2),
sigma = 2^seq(from=-7,to=3,by=2)))
svm = train(Type ~ .,data=Glass, method='svmRadial',trControl=svm_valid,
tuneGrid=svm_grid,preProcess=c("center","scale"))
svm
svm$bestTune
dataprd <- data.frame(RI = numeric(),    # Creo data frame vacio
Na = numeric(),
Mg = numeric(),
Al = numeric(),
Si = numeric(),
K = numeric(),
Ca = numeric(),
Ba = numeric(),
Fe = numeric(),
stringsAsFactors = FALSE)
dataprd[1,] <- list(1.49, 13.45, 4.05, 1.21, 73.18, 0.37, 7.98, 0.2, 0)
dataprd[2,] <- list(1.52, 13.74, 3.87, 1.29, 71.97, 0.25, 8.02, 0, 0.13)
(predict(model,dataprd))
dataprd
#Cargar librerías e1071 y MASS. Leer dataset cats
library(e1071)
library(MASS)
data(cats)
#Obtener clasificador SVM con kernel radial basis
(model <- svm(Sex ~ . ,data=cats))
#Componentes del objeto de salida
str(model)
#Representar clases generadas por el clasificador, datos de entrada y vectores soporte
plot(model,cats)
#Ajustar parámetro del kernel y de regularización
(t <- tune.svm(Sex ~ .,data=cats, gamma=seq(1,5,0.2),cost=seq(1,5,0.2)))
#Visualizar resultado del ajuste de parámetros
plot(t)
#Obtener el modelo con los parámetros ajustados
(model <- t$best.model)
#Obtener el modelo con los parámetros ajustados
(model <- t$best.model)
#Realizar una predicción para un gato con Bwt=3.17 y Hwt=8.93
dp <- data.frame(Bwt=3.17,Hwt=8.93)
dp
(predict(model,dp))
(predict(model,dataprd))
dataprd <- data.frame(RI = numeric(),    # Creo data frame vacio
Na = numeric(),
Mg = numeric(),
Al = numeric(),
Si = numeric(),
K = numeric(),
Ca = numeric(),
Ba = numeric(),
Fe = numeric(),
stringsAsFactors = FALSE)
dataprd[1,] <- list(1.49, 13.45, 4.05, 1.21, 73.18, 0.37, 7.98, 0.2, 0)
dataprd[2,] <- list(1.52, 13.74, 3.87, 1.29, 71.97, 0.25, 8.02, 0, 0.13)
(predict(model,dataprd))
svm_valid = trainControl(method='cv',number=10)
svm = train(Type ~ .,data=Glass, method='svmRadial',trControl=svm_valid,
tuneGrid=svm_grid,preProcess=c("center","scale"))
svm = train(Type ~ .,data=Glass, method='svmRadial',trControl=svm_valid,
tuneGrid=svm_grid,preProcess=c("center","scale"))
svm
svm$bestTune
dataprd <- data.frame(RI = numeric(),    # Creo data frame vacio
Na = numeric(),
Mg = numeric(),
Al = numeric(),
Si = numeric(),
K = numeric(),
Ca = numeric(),
Ba = numeric(),
Fe = numeric(),
stringsAsFactors = FALSE)
dataprd[1,] <- list(1.49, 13.45, 4.05, 1.21, 73.18, 0.37, 7.98, 0.2, 0)
dataprd[2,] <- list(1.52, 13.74, 3.87, 1.29, 71.97, 0.25, 8.02, 0, 0.13)
(predict(model,dataprd))
(predict(svm,dataprd))
(prediction = predict(svm,dataprd))
prediction
# Medidas de performance sobre cada pliegue (parÃ¡metros finales)
svm$resample
# RepresentaciÃ³n grÃ¡fica del ajuste de parÃ¡metros
plot(svm)
svm_valid = trainControl(method='cv',number=15)
svm = train(Type ~ .,data=Glass, method='svmRadial',trControl=svm_valid,
tuneGrid=svm_grid,preProcess=c("center","scale"))
svm = train(Type ~ .,data=Glass, method='svmRadial',trControl=svm_valid,
tuneGrid=svm_grid,preProcess=c("center","scale"))
svm
setwd("C:/Users/12421/OneDrive/Escritorio/Master-BD-DS/Asignaturas/VISINF/entregable/Playas_Espana")
shiny::runApp()
install.packages(stringi)
install.packages('stringi')
install.packages("stringi")
install.packages("stringi")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
